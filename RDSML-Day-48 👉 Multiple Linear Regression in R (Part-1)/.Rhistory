5+6
age
age-height()
x <- (1, 3, 5, 7, 9)
x
x
data = C(9, 6, 17, 31, 11)
mean(data)
summary(data)
# Updating the file
data = c(9, 6, 17, 31, 11)
x = mean(data)
summary(data)
z = x/2
data = c(9, 6, 17, 31, 11)
mean(data)
summary(data)
# Updating the file
data = c(9, 6, 17, 31, 11)
x = mean(data)
summary(data)
z = x/2
data = c(9, 6, 17, 31, 11)
mean(data)
summary(data)
# Updating the file
data = c(9, 6, 17, 31, 11)
x = mean(data)
summary(data)
z = x/2
z
setwd("~/")
setwd("~/")
setwd("~/")
My_age = 97
My_weight = 60
My_age = 97
My_weight = 60
My_height = 65
My_weight = 60
My_height = 65
My_age = 97
My_age = 97
My_weight = 60
My_height = 65
x = (My_height*My_age)/My_weight
print(x)
mean(students_height)
mean(students_height)
students_height = c(50, 55, 64, 71, 45.25)
mean(students_height)
library(ggplot2)
dataset = mtcars
View(dataset)
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point()
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18)
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm)
# Removing the confidence interval
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
# Loess method
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
# Change the line type and color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm)
# Change the line type and color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm, linetype = "dashed")
# Change the line type and color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm, linetype = "dashed", color = "darkblue")
# Change the line type and color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm, linetype = "dotted", color = "darkblue")
# Change the line type and color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm, linetype = "dashed", color = "darkblue")
geom_smooth(method = lm, linetype = "dashed", color = "darkred", fill = "blue"")
# Changing the confidence interval color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm, linetype = "dashed", color = "darkred", fill = "blue")
# Changing the confidence interval color
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18) +
geom_smooth(method = lm, linetype = "dashed", color = "darkred", fill = "blue")
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point(size=1, shape=18, color = "blue") +
geom_smooth(method = lm, linetype = "dashed", color = "darkred", fill = "blue")
dataset$cyl
class(dataset$cyl)
dataset$cyl = as.factor(dataset$cyl)
dataset$cyl = as.factor(dataset$cyl)
dataset$cyl = as.factor(dataset$cyl)
class(dataset$cyl)
# Changing the point shapes by the levels of cyl
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl)) +
geom_point()
# Changing point shapes and colors
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl, color = cyl)) +
geom_point()
# Changing point shapes, colors and sizes
ggplot(dataset, aes(x = wt, y = mpg, shape = cyl, color = cyl, size = cyl)) +
geom_point()
# Changing point shapes, colors and sizes
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, size = cyl)) +
geom_point()
# Changing point shapes, colors and sizes
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, size = cyl)) +
geom_point()
# Changing point shapes, colors and sizes
ggplot(dataset, aes(x = wt, y = mpg, size = cyl)) +
geom_point()
x = c(45, 50, 77, 51, 46)
summary(data)
library(readxl)
dataset <- read_excel(NULL)
setwd("~/")
library(readxl)
Butterflies_in_Singapore <- read_excel("C:/Users/Acer/Desktop/Butterflies in Singapore.xlsx")
View(Butterflies_in_Singapore)
# Basic barplot
ggplot
# Basic barplot
ggplot2
data = Butterflies_in_Singapore
ggplot(data = dataset, aes(x = number, y = family)) +
geom_bar(stat = "identity")
ggplot(data = dataset, aes(x = number, y = family)) +
geom_bar(stat = "identity")
ggplot(data = Butterflies_in_Singapore, aes(x = number, y = family)) +
geom_bar(stat = "identity")
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity")
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers) +
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar()
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity")
ggplot2(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity")
# Basic barplot
ggplot2
# Basic barplot
install.packages()
ggplot2
ggplot
library()
ggplot
ggplot2
library.packages
library(ggplot2)
data = Butterflies_in_Singapore
ggplot2(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity")
data = Butterflies_in_Singapore
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity")
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity", width = 0.5)
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity", width = 0.3)
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity", width = 0.2)
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity", color = "blue", fill = "white", width = 0.2)
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity", color = "black", fill = "gray", width = 0.2)
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity", color = "black", fill = "gray", width = 0.2) +
geom_text(aes(label = len), vjust = 1.6, size = 3, color = "white") + theme_minimal()
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity", color = "black", fill = "gray", width = 0.2) +
geom_text(aes(label = len), vjust = 1.6, size = 3) + theme_minimal()
gplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity", color = "black", fill = "gray", width = 0.2) +
geom_text(aes(label = Family), vjust = 1.6, size = 3) + theme_minimal()
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity", color = "black", fill = "gray", width = 0.2) +
geom_text(aes(label = Family), vjust = 1.6, size = 3)
ggplot(data = Butterflies_in_Singapore, aes(x = Family, y = Numbers)) +
geom_bar(stat = "identity", color = "black", fill = "gray", width = 0.2) +
geom_text(aes(label = Numbers), vjust = 1.6, size = 3)
library(readxl)
Pigeons_growth_feed <- read_excel("D:/Scientific works/Practice R and GIS/Datasets/Pigeons_growth_feed.csv")
setwd("~/")
library(readxl)
dataset <- read_excel(NULL)
# Installing dataset
Pigeons_growth_feed
library(readxl)
Pigeons_growth_feed <- read_excel("D:/Scientific works/Practice R and GIS/Datasets/Pigeons_growth_feed.xlsx")
View(Pigeons_growth_feed)
dataset = Pigeons_growth_feed
# Importing the dataset
dataset = read.csv("Pigeons_growth_feed")
dataset = read_xls("Pigeons_growth_feed")
summs <- Pigeons_growth_feed %>%
group_by(Feed, Dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
summs <- Pigeons_growth_feed %>%
group_by(Feed, Dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
summs <- Pigeons_growth_feed %>%
group_by(feed, dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
Pigeons_growth_feed = read.csv("Pigeons_growth_feed")
# Importing the dataset
Pigeons_growth_feed
summs <- Pigeons_growth_feed %>%
group_by(feed, dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
summs <- Pigeons_growth_feed %>%
group_by(feed, dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
# installing Packages
install.packages()
install.packages(c("tidyverse", "car", "emmeans", "effectsize", "performance", "broom", "kableExtra"))
library(tidyverse)
Pigeons_growth_feed
Pigeons_growth_feed = read.csv("Pigeons_growth_feed")
summs <- Pigeons_growth_feed %>%
group_by(feed, dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
summs <- Pigeons_growth_feed %>%
group_by(feed, dose) %>%
group_by(feed, dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
library(ggplot2)
ggplot(summs, aes(dose, mean, group = feed))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width = .2)+
facet_wrap(~feed, nrow = 1) +
labs(x="dose", y="Mean live weight",
title="Interaction of feed x dose") +
theme_classic(base_size = 12)
summs <- Pigeons_growth_feed %>%
summs <- Pigeons_growth_feed %>%
group_by(feed, dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
library(tidyverse)
summs <- Pigeons_growth_feed %>%
group_by(feed, dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
detach("package:tidyverse", unload = TRUE)
summs <- Pigeons_growth_feed %>%
group_by(feed, dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
ggplot(summs, aes(dose, mean, group = feed))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width = .2)+
facet_wrap(~feed, nrow = 1) +
labs(x="dose", y="Mean live weight",
title="Interaction of feed x dose") +
theme_classic(base_size = 12)
summs <- Pigeons_growth_feed %>%
group_by(feed, dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
group_by(Feed, Dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
group_by(Dose, Feed) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
group_by(Feed, Dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
summarise(mean = mean(Dose), se = sd(Dose)/sqrt(n()), .groups = "drop")
summarise(mean = mean(Feed), se = sd(Feed)/sqrt(n()), .groups = "drop")
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
summarise(mean = mean(`Live weight`), se = sd(`Live weight`)/sqrt(n()), .groups = "drop")
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
summarise(mean = mean(y=Dose), se = sd(y=Dose)/sqrt(n()), .groups = "drop")
summarise(mean=mean(y), se=sd(y)/sqrt(n()), .groups = "drop")
# installing Packages
install.packages()
library(tidyverse)
Pigeons_growth_feed = read.csv("Pigeons_growth_feed")
Pigeons_growth_feed = read.csv("Pigeons_growth_feed")
Pigeons_growth_feed <- read.csv("D:/Scientific works/Practice R and GIS/Datasets/Pigeons_growth_feed.csv")
View(Pigeons_growth_feed)
library(tidyverse)
Pigeons_growth_feed = read.csv("Pigeons_growth_feed")
Pigeons_growth_feed = read.csv("Pigeons growth feed")
Pigeons_growth_feed
Pigeons_growth_feed = read.csv("Pigeons_growth_feed")
summs <- Pigeons_growth_feed %>%
group_by(Feed, Dose) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
detach("package:dplyr", unload = TRUE)
summarise(mean = mean(Live.weight), se = sd(Live.weight)/sqrt(n())
, .groups = "drop")
Pigeons_growth_feed = read.csv("Pigeons_growth_feed")
Pigeons_growth_feed
Pigeons_growth_feed = read.csv("Pigeons_growth_feed")
Pigeons_growth_feed = read.csv("Pigeons growth feed")
View(Pigeons_growth_feed)
Pigeons_growth_feed
Pigeons_growth_feed = read.csv(Pigeons_growth_feed)
Pigeons_growth_feed = read.csv("Pigeons_growth_feed")
Pigeons_growth_feed = read.csv("Pigeons_growth_feed")
Pigeons_growth_feed
View(Pigeons_growth_feed)
setwd("D:/Scientific works/NBICT/RDSML-B-8-NBICT/RDSML-Day-48 👉 Multiple Linear Regression in R (Part-1)")
dataset = read.csv("50_Startups.csv")
View(dataset)
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
library(caTools)
set.seed(123)
split <- sample.split(dataset$Profit, SplitRatio = 0.8)
training_set <- subset(dataset, split == TRUE)
test_set <- subset(dataset, split == FALSE)
View(training_set)
View(test_set)
regressor <- lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend +
State,
data = training_set)
summary(regressor)
